# .github/workflows/release-from-cargo.yml
name: Release from Cargo.toml (musl static)

on:
  pull_request:
    types: [closed]
    branches: [main]
  push:
    tags: [ "v*" ]        # build + publish when a v-tag is pushed
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  BIN_NAME: owl

permissions:
  contents: read

jobs:
  # 1) On PR merge -> create tag from Cargo.toml
  auto_tag:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 1

      - name: Read version from Cargo.toml
        id: version
        shell: bash
        run: |
          set -euo pipefail
          ver=$(grep -m1 -E '^\s*version\s*=\s*"' Cargo.toml | sed -E 's/.*"\s*([^"]+)\s*".*/\1/')
          [[ -n "${ver:-}" ]] || { echo "Could not parse version"; exit 1; }
          echo "version=$ver" >> "$GITHUB_OUTPUT"

      - name: Fail if tag exists on remote
        shell: bash
        run: |
          set -euo pipefail
          ver="${{ steps.version.outputs.version }}"
          if git ls-remote --exit-code --tags origin "refs/tags/v${ver}" >/dev/null 2>&1; then
            echo "Tag v${ver} already exists on origin. Aborting." >&2
            exit 1
          fi

      - name: Create and push tag
        shell: bash
        run: |
          set -euo pipefail
          ver="${{ steps.version.outputs.version }}"
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git tag "v${ver}" "${{ github.event.pull_request.merge_commit_sha }}"
          git push origin "v${ver}"

  # 2) On tag push -> build static Linux binary & publish Release
  build_linux_musl:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      TARGET_TRIPLE: x86_64-unknown-linux-musl
      # Helpful for cc/cmake-based deps; musl-tools provides musl-gcc
      CC_x86_64_unknown_linux_musl: musl-gcc
      CARGO_PROFILE_RELEASE_LTO: true
    steps:
      - uses: actions/checkout@v4

      - name: Install musl toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends musl-tools pkg-config

      - name: Setup Rust (with musl target)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build static release (musl)
        run: cargo build --release --target $TARGET_TRIPLE --verbose

      - name: Package tarball
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TARGET_DIR="target/$TARGET_TRIPLE/release"
          OUT="${BIN_NAME}-linux-x86_64-musl.tar.gz"
          # strip may be from binutils; use || true in case symbols are needed
          strip "$TARGET_DIR/${BIN_NAME}" || true
          tar -czf "$OUT" -C "$TARGET_DIR" "${BIN_NAME}"
          echo "artifact=$OUT" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pack.outputs.artifact }}
          path: ${{ steps.pack.outputs.artifact }}
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build_linux_musl
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**
          generate_release_notes: true
